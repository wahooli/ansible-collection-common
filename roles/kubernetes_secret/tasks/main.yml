---
# tasks file for kubernetes_secret
- name: Get current user name # noqa: var-naming[no-role-prefix]
  ansible.builtin.command: whoami
  register: current_user_name
  changed_when: current_user_name.rc != 0
  when: ansible_user is undefined or ansible_user == ""

- name: Create venv and install kubernetes pip module
  vars:
    venv_user: "{{ ansible_user | default(current_user_name.stdout) | default(omit) }}"
    virtualenv_command: "{{ 'python -m venv' if ansible_facts['os_family'] == 'Archlinux' else 'virtualenv' }}"
  block:
  - name: Get user home path # noqa: var-naming[no-role-prefix]
    ansible.builtin.shell:
      executable: /bin/bash
      cmd: |-
        set -o pipefail
        grep -E {{ venv_user | default('root') }}: /etc/passwd | awk -F: '{ print $6 }'
    failed_when: user_home_path.rc != 0
    changed_when: false
    register: user_home_path

  - name: Ensure the virtual environment exists
    ansible.builtin.pip:
      name: packaging
      virtualenv: "{{ user_home_path.stdout }}/.ansible-venv"
      virtualenv_command: "{{ virtualenv_command }}"

  - name: Run commands in venv
    vars:
      ansible_python_interpreter: "{{ venv_python }}"
      venv_dir: "{{ user_home_path.stdout }}/.ansible-venv"
      venv_python: "{{ venv_dir }}/bin/python"
    block:
    - name: Install python pre-requisites
      ansible.builtin.pip:
        name: kubernetes
    - name: Create secrets
      when:
      - kubernetes_secret_data is defined
      ansible.builtin.include_tasks: create-secret-with-ns.yml
      loop: "{{ kubernetes_secret_data | default(omit) }}"
      loop_control:
        loop_var: secret
        label: "{{ secret.namespace | default(kubernetes_secret_namespace | default('default')) }}.{{ secret.name }}"

  # end block Run commands in venv
# end block Create venv and install kubernetes pip module
