---
- name: Check if can access cluster with kubectl # noqa: var-naming[no-role-prefix]
  ansible.builtin.command: "kubectl get nodes"
  register: kubectl_command
  failed_when: false
  changed_when: false

- name: Determine cilium_kubeconfig fact if not set
  when:
  - cilium_kubeconfig | default("") == ""
  ansible.builtin.import_tasks: resolve-kubeconfig.yml

- name: Check if ciliumctl exists # noqa: var-naming[no-role-prefix]
  ansible.builtin.command: "which cilium"
  register: which_cilium_command
  changed_when: false
  failed_when: false

- name: Remove ciliumctl
  become: true
  when: which_cilium_command.rc == 0
  ansible.builtin.file:
    path: "{{ which_cilium_command.stdout | trim }}"
    state: absent

- name: Remove k3s-killall.sh.d script
  become: true
  when: cilium_uninstall_remove_killall_script | default(false)
  ansible.builtin.file:
    path: "{{ cilium_k3s_killalld_dir }}/99-remove-cilium-interfaces.sh"
    state: absent

- name: Check if helm exists # noqa: var-naming[no-role-prefix]
  ansible.builtin.command: "which helm"
  register: which_helm_command
  changed_when: false
  failed_when: false

- name: Get current user name # noqa: var-naming[no-role-prefix]
  ansible.builtin.command: whoami
  register: current_user_name
  changed_when: current_user_name.rc != 0
  when: ansible_user is undefined or ansible_user == ""

- name: Uninstall cilium in python venv
  when: kubectl_command.rc == 0
  vars:
    venv_user: "{{ ansible_user | default(current_user_name.stdout) | default(omit) }}"
    virtualenv_command: "{{ 'python -m venv' if ansible_facts['os_family'] == 'Archlinux' else 'virtualenv' }}"
  block:
  - name: Get user home path # noqa: var-naming[no-role-prefix]
    ansible.builtin.shell:
      executable: /bin/bash
      cmd: |-
        set -o pipefail
        grep -E {{ venv_user | default('root') }}: /etc/passwd | awk -F: '{ print $6 }'
    failed_when: user_home_path.rc != 0
    changed_when: false
    register: user_home_path

  - name: Ensure the virtual environment exists
    ansible.builtin.pip:
      name: packaging
      virtualenv: "{{ user_home_path.stdout }}/.ansible-venv"
      virtualenv_command: "{{ virtualenv_command }}"

  - name: Run commands in venv
    vars:
      ansible_python_interpreter: "{{ venv_python }}"
      venv_dir: "{{ user_home_path.stdout }}/.ansible-venv"
      venv_python: "{{ venv_dir }}/bin/python"
    block:
    - name: Install python pre-requisites
      ansible.builtin.pip:
        name: kubernetes
    - name: Uninstall cilium
      environment:
        K8S_AUTH_KUBECONFIG: "{{ cilium_kubeconfig }}"
      when:
      - kubectl_command.rc == 0
      - which_helm_command.rc == 0
      block:
      - name: Uninstall cilium helm chart
        ansible.builtin.include_tasks: helm-uninstall.yml

      - name: Remove cilium helm repo
        when: which_helm_command.rc == 0
        kubernetes.core.helm_repository:
          name: projectcilium
          repo_url: https://docs.tigera.io/cilium/charts
          state: absent
      - name: Remove cilium crds
        when: cilium_uninstall_remove_crds | default(false)
        ansible.builtin.shell:
          executable: /bin/bash
          cmd: |-
            set -o pipefail
            for cr in $(kubectl api-resources --no-headers=true --api-group="cilium.io" | awk '{print $1;}'); do
              kubectl delete $cr --all -A
            done
            for crd in $(kubectl api-resources --no-headers=true --api-group="cilium.io" -o name); do
              kubectl delete crd $crd
            done
        failed_when: cilium_crd_delete.rc != 0
        changed_when: false
        register: cilium_crd_delete
    # end block Uninstall cilium
  # end block Run commands in venv
# end block Uninstall cilium in python venv
