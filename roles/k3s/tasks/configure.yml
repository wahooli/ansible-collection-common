- name: Ensure K3s config dir exists
  ansible.builtin.file:
    path: "{{ config_path }}"
    state: directory
    mode: "0755"

- name: Ensure K3s images dir exists
  ansible.builtin.file:
    path: "{{ k3s_data_dir }}/agent/images/"
    state: directory
    mode: "0755"

- name: Create symlink to /var/lib/kubelet if k3s_kubelet_root_dir is defined
  become: true
  when: k3s_kubelet_root_dir | default ("/var/lib/kubelet") != "/var/lib/kubelet"
  tags:
  - install
  - configure
  block:
  - name: "Create path {{ k3s_kubelet_root_dir }}"
    ansible.builtin.file:
      path: "{{ k3s_kubelet_root_dir }}"
      state: directory
      mode: "0750"
  - name: Create symlink to /var/lib/kubelet
    ansible.builtin.file:
      src: "{{ k3s_kubelet_root_dir }}"
      dest: "/var/lib/kubelet"
      state: link

- name: Apply K3s configuration
  notify:
  - Restart K3s
  block:
  - name: Apply K3s configuration file if enabled
    ansible.builtin.copy:
      dest: "{{ config_path }}/config.yaml"
      owner: root
      group: root
      mode: "0644"
      content: "{{ k3s_config | to_nice_yaml }}"
    when: k3s_use_config_file is defined and k3s_use_config_file
  - name: Remove K3s configuration file if not enabled
    ansible.builtin.file:
      path: "{{ config_path }}/config.yaml"
      state: absent
    when: k3s_use_config_file is undefined or not k3s_use_config_file
# end block Apply K3s configuration

- name: Apply kubelet configuration
  notify:
  - Restart K3s
  block:
  - name: Copy kubelet configuration
    ansible.builtin.template:
      src: "kubelet.config.yml.j2"
      dest: "{{ config_path }}/kubelet.config.yml"
      owner: root
      group: root
      mode: "0644"
    when:
    - k3s_kubelet_config is defined
    - k3s_kubelet_config | length > 0
  - name: Remove kubelet configuration file if not enabled
    ansible.builtin.file:
      path: "{{ config_path }}/kubelet.config.yml"
      state: absent
    when: k3s_kubelet_config is undefined or k3s_kubelet_config | length < 1
# end block Apply kubelet configuration

- name: Apply kubescheduler configuration
  when:
  - k3s_role == "server"
  notify:
  - Restart K3s
  block:
  - name: Copy kubescheduler configuration
    ansible.builtin.template:
      src: "kubescheduler.config.yml.j2"
      dest: "{{ config_path }}/kubescheduler.config.yml"
      owner: root
      group: root
      mode: "0644"
    when:
    - k3s_kubescheduler_config is defined
    - k3s_kubescheduler_config | length > 0
  - name: Remove kubelet configuration file if not enabled
    ansible.builtin.file:
      path: "{{ config_path }}/kubescheduler.config.yml"
      state: absent
    when: k3s_kubescheduler_config is undefined or k3s_kubescheduler_config | length < 1
# end block Apply kubescheduler configuration

- name: Apply registries configuration
  notify:
  - Restart K3s
  block:
  - name: Add registry mirrors if defined
    ansible.builtin.copy:
      dest: "{{ config_path }}/registries.yaml"
      mode: "0644"
      content: |
        {{ k3s_registries_config | to_nice_yaml }}
    when: k3s_registries_config is defined
  - name: Remove registry mirrors if not defined
    ansible.builtin.file:
      path: "{{ config_path }}/registries.yaml"
      state: absent
    when: k3s_registries_config is undefined
# end block Apply registries configuration

- name: Create TOKEN file
  ansible.builtin.copy:
    dest: "{{ config_path }}/TOKEN"
    owner: root
    group: root
    mode: "0644"
    content: "{{ k3s_token }}"
  tags:
  - install

- name: Create SERVER file
  when: k3s_server is defined
  ansible.builtin.copy:
    dest: "{{ config_path }}/SERVER"
    owner: root
    group: root
    mode: "0644"
    content: "{{ k3s_server }}"
  tags:
  - install
