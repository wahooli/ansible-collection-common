- name: Fail if k3s_kubeconfig_output_path is undefined
  when: k3s_kubeconfig_output_path is undefined
  ansible.builtin.fail:
    msg: "k3s_kubeconfig_output_path variable is undefined"

- name: Get current user name
  ansible.builtin.command: whoami
  register: current_user_name
  changed_when: current_user_name.rc != 0

- name: Create temporary directory
  ansible.builtin.tempfile:
    state: directory
    suffix: kubeconfig
  register: temppath
  changed_when: false

- name: Create copy of kubeconfig
  ansible.builtin.copy:
    src: "{{ '/etc/rancher/k3s/k3s.yaml' if current_user_name.stdout == 'root' else '~/.kube/config' }}"
    dest: "{{ temppath.path }}/kubeconfig"
    remote_src: true
    owner: "{{ current_user_name.stdout }}"
    group: "{{ current_user_name.stdout }}"
    mode: "0600"
  changed_when: false

- name: Set vars
  ansible.builtin.set_fact:
    k3s_kubeconfig_cluster_name: "{{ k3s_kubeconfig_cluster_name | default(k3s_kubeconfig_context_name | default('default')) }}"
    k3s_kubeconfig_context_name: "{{ k3s_kubeconfig_context_name | default('default') }}"
    k3s_kubeconfig_user_name: "{{ k3s_kubeconfig_user_name | default(k3s_kubeconfig_context_name | default('default')) }}"
    k3s_kubeconfig_server: "{{ k3s_kubeconfig_server | default(ansible_ssh_host) }}"

- name: Read cluster certificate authority data
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail
      kubectl config view --minify --raw --output 'jsonpath={..cluster.certificate-authority-data}' --kubeconfig {{ temppath.path }}/kubeconfig | base64 -d | tee {{ temppath.path }}/ca.crt
  register: kubectl_shell
  changed_when: kubectl_shell.rc != 0

- name: Read user certificate data
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail
      kubectl config view --minify --raw --output 'jsonpath={..user.client-certificate-data}' --kubeconfig {{ temppath.path }}/kubeconfig | base64 -d  | tee {{ temppath.path }}/user.crt
  register: kubectl_shell
  changed_when: kubectl_shell.rc != 0

- name: Read user key data
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |
      set -o pipefail
      kubectl config view --minify --raw --output 'jsonpath={..user.client-key-data}' --kubeconfig {{ temppath.path }}/kubeconfig | base64 -d | tee {{ temppath.path }}/user.key
  register: kubectl_shell
  changed_when: kubectl_shell.rc != 0

- name: Delete default cluster
  ansible.builtin.command: kubectl config delete-cluster default --kubeconfig {{ temppath.path }}/kubeconfig
  register: kubectl_command
  changed_when: kubectl_command.rc != 0

- name: Delete default user
  ansible.builtin.command: kubectl config delete-user default --kubeconfig {{ temppath.path }}/kubeconfig
  register: kubectl_command
  changed_when: kubectl_command.rc != 0

- name: Delete default context
  ansible.builtin.command: kubectl config delete-context default --kubeconfig {{ temppath.path }}/kubeconfig
  register: kubectl_command
  changed_when: kubectl_command.rc != 0

- name: "Create cluster {{ k3s_kubeconfig_cluster_name }}"
  ansible.builtin.command: >-
    kubectl config set-cluster {{ k3s_kubeconfig_cluster_name }}
    --embed-certs=true
    --server='https://{{ k3s_kubeconfig_server }}:6443'
    --certificate-authority='{{ temppath.path }}/ca.crt'
    --kubeconfig {{ temppath.path }}/kubeconfig
  register: kubectl_command
  changed_when: kubectl_command.rc != 0

- name: "Create user {{ k3s_kubeconfig_user_name }}"
  ansible.builtin.command: >-
    kubectl config set-credentials {{ k3s_kubeconfig_user_name }}
    --embed-certs=true
    --client-certificate='{{ temppath.path }}/user.crt'
    --client-key='{{ temppath.path }}/user.key'
    --kubeconfig {{ temppath.path }}/kubeconfig
  register: kubectl_command
  changed_when: kubectl_command.rc != 0

- name: "Create context {{ k3s_kubeconfig_context_name }}"
  when: k3s_kubeconfig_context_name is defined
  ansible.builtin.command: >-
    kubectl config set-context {{ k3s_kubeconfig_context_name }}
      --cluster='{{ k3s_kubeconfig_cluster_name }}'
      --user='{{ k3s_kubeconfig_user_name }}'
      --kubeconfig {{ temppath.path }}/kubeconfig
  register: kubectl_command
  changed_when: kubectl_command.rc != 0

- name: "Use context {{ k3s_kubeconfig_context_name }}"
  when: k3s_kubeconfig_context_name is defined
  ansible.builtin.command: kubectl config use-context '{{ k3s_kubeconfig_context_name }}' --kubeconfig {{ temppath.path }}/kubeconfig
  register: kubectl_command
  changed_when: kubectl_command.rc != 0

- name: Fetch modified kubeconfig
  when: fetch_kubeconfig_host_override is undefined
  ansible.builtin.fetch:
    src: "{{ temppath.path }}/kubeconfig"
    dest: "{{ k3s_kubeconfig_output_path }}/kubeconfig-{{ inventory_hostname }}"
    flat: true
    fail_on_missing: true
    validate_checksum: true

- name: Fetch modified kubeconfig to remote host
  when: fetch_kubeconfig_host_override is defined
  block:
  - name: "Read kubeconfig from {{ inventory_hostname }}"
    ansible.builtin.slurp:
      src: "{{ temppath.path }}/kubeconfig"
    register: kubeconfig
  - name: Write kubeconfig
    delegate_to: "{{ fetch_kubeconfig_host_override }}"
    changed_when: false
    ansible.builtin.copy:
      content: "{{ kubeconfig.content | ansible.builtin.b64decode }}"
      dest: "{{ k3s_kubeconfig_output_path }}/kubeconfig-{{ inventory_hostname }}"
      mode: '0644'
# end block Fetch modified kubeconfig to remote host

- name: Remove tmp path
  ansible.builtin.file:
    path: "{{ temppath.path }}"
    state: absent
  tags:
  - molecule-idempotence-notest

- name: Get installed kubectl version
  when: k3s_kubeconfig_merge_configs | default(false)
  delegate_to: "{{ fetch_kubeconfig_host_override | default('localhost') }}"
  ansible.builtin.command: "kubectl version --client=true --output=json"
  failed_when: false
  changed_when: false
  register: kubectl_installed_version

- name: Merge kubeconfigs
  when:
  - k3s_kubeconfig_merge_configs | default(false)
  - kubectl_installed_version.rc == 0
  delegate_to: "{{ fetch_kubeconfig_host_override | default('localhost') }}"
  block:
  - name: Find kubeconfig fetched files
    run_once: true
    ansible.builtin.find:
      paths: "{{ k3s_kubeconfig_output_path }}"
      file_type: file
      recurse: false
      patterns: "^kubeconfig-.*"
      use_regex: true
    register: kubeconfig_files
    tags:
    - molecule-idempotence-nofail

  - name: "Merge configs with kubectl"
    run_once: true
    ansible.builtin.command: kubectl config view --flatten
    register: kubectl_flatten
    changed_when: false
    failed_when: kubectl_flatten.rc != 0
    environment:
      # with this order, first kubeconfig files take priority
      # when target kubeconfig file is placed last, its contents can be overwritten
      KUBECONFIG: "{{ kubeconfig_files.files | map(attribute='path') | join(':') }}:{{ k3s_kubeconfig_merge_path | default(k3s_kubeconfig_output_path + '/kubeconfig') }}"

  - name: "Write merged kubeconfig to {{ k3s_kubeconfig_merge_path | default(k3s_kubeconfig_output_path + '/kubeconfig') }}"
    run_once: true
    ansible.builtin.copy:
      content: "{{ kubectl_flatten.stdout }}"
      dest: "{{ k3s_kubeconfig_merge_path | default(k3s_kubeconfig_output_path + '/kubeconfig') }}"
      mode: '0600'

  - name: Remove separate kubeconfig files
    when: k3s_kubeconfig_merge_cleanup
    ansible.builtin.file:
      path: "{{ k3s_kubeconfig_output_path }}/kubeconfig-{{ inventory_hostname }}"
      state: absent
    changed_when: false
# end block Merge kubeconfigs
