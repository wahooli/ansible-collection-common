---
# tasks file for k3s
- name: Populate service facts
  become: true
  ansible.builtin.service_facts:

- name: Fail if k3s_role is undefined
  when: k3s_role is undefined
  ansible.builtin.fail:
    msg: "k3s_role variable is undefined"

- name: Run pre-install tasks
  become: true
  ansible.builtin.import_tasks: install-prepare.yml
  when: not (k3s_skip_prepare | default(false))
  tags:
  - prepare

- name: Set role facts
  ansible.builtin.import_tasks: set-vars.yml

- name: Configure K3s
  become: true
  ansible.builtin.import_tasks: configure.yml
  tags:
  - install
  - configure

- name: Download K3s
  ansible.builtin.import_tasks: download.yml
  become: true
  tags:
  - install

- name: Copy K3s service file
  become: true
  ansible.builtin.template:
    src: "k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: "0644"
  notify:
  - Systemd daemon reload
  - Restart K3s
  tags:
  - install
  - configure

- name: Copy k3s-killall.sh
  become: true
  ansible.builtin.template:
    src: "k3s-killall.sh.j2"
    dest: "{{ k3s_bin_dir }}/k3s-killall.sh"
    owner: root
    group: root
    mode: "0700"
  tags:
  - install
  - configure

- name: Ensure k3s-killall.sh.d directory exists
  become: true
  ansible.builtin.file:
    dest: "{{ k3s_bin_dir }}/k3s-killall.sh.d/"
    state: directory
    mode: "0755"

- name: Copy k3s-uninstall.sh
  become: true
  ansible.builtin.template:
    src: "k3s-uninstall.sh.j2"
    dest: "{{ k3s_bin_dir }}/k3s-uninstall.sh"
    owner: root
    group: root
    mode: "0700"
  tags:
  - install
  - configure

- name: Start K3s on server nodes
  become: true
  when:
  - "'k3s.service' not in services"
  - k3s_systemd_start
  - k3s_role == "server"
  tags:
  - install
  block:
  - name: Start K3s server node with cluster-init
    throttle: 1
    when:
    - using_embedded_etcd
    - inventory_hostname == k3s_cluster_init_host
    ansible.builtin.systemd_service:
      name: k3s
      state: started
      daemon_reload: true
      enabled: "{{ k3s_systemd_enable }}"
  - name: Start K3s server node
    throttle: 1
    when: |
      not using_embedded_etcd
      or
      k3s_role == "server"
    ansible.builtin.systemd_service:
      name: k3s
      state: started
      daemon_reload: true
      enabled: "{{ k3s_systemd_enable }}"
# end block Start K3s on server nodes

- name: Wait for node-token on servers
  become: true
  when:
  - k3s_role == "server"
  ansible.builtin.wait_for:
    path: "{{ k3s_data_dir }}/server/node-token"

- name: Remove cluster-init from configuration
  become: true
  tags:
  - install
  when:
  - "'k3s.service' not in services or k3s_force_cluster_init is defined"
  - using_embedded_etcd
  - inventory_hostname == k3s_cluster_init_host
  block:
  - name: Remove cluster-init from configuration
    ansible.builtin.set_fact:
      k3s_config: "{{ k3s_config | default({}) | combine({'cluster-init': omit}) }}"
  - name: Rewrite K3s service file
    when: k3s_use_config_file is undefined or not k3s_use_config_file
    register: cluster_init_service_file
    ansible.builtin.template:
      src: "k3s.service.j2"
      dest: "{{ systemd_dir }}/k3s.service"
      owner: root
      group: root
      mode: "0644"
  - name: Rewrite K3s configuration file if enabled
    when: k3s_use_config_file is defined and k3s_use_config_file
    register: cluster_init_config_file
    ansible.builtin.copy:
      dest: "{{ config_path }}/config.yaml"
      owner: root
      group: root
      mode: "0644"
      content: "{{ k3s_config | to_nice_yaml }}"
  - name: Restart or reload K3s service
    ansible.builtin.systemd_service:
      name: k3s
      state: "{{ 'restarted' if k3s_systemd_start else 'reloaded' }}"
      daemon_reload: true
      enabled: "{{ k3s_systemd_enable }}"
# end block Remove cluster-init from configuration

- name: Start K3s on agent node
  when:
  - "'k3s.service' not in services"
  - k3s_systemd_start
  - k3s_role == "agent"
  become: true
  ansible.builtin.systemd_service:
    name: k3s
    state: started
    daemon_reload: true
    enabled: "{{ k3s_systemd_enable }}"
  tags:
  - install

- name: Get current user name
  ansible.builtin.command: whoami
  register: current_user_name
  changed_when: current_user_name.rc != 0

- name: Create kubeconfig for non root user
  when:
  - current_user_name.stdout != "root"
  - k3s_role == "server"
  block:
  - name: Ensure .kube directory exists
    ansible.builtin.file:
      path: "~{{ current_user_name.stdout }}/.kube/"
      state: directory
      mode: "0700"
  - name: Copy k3s.yaml into .kube/config
    become: true
    ansible.builtin.copy:
      src: /etc/rancher/k3s/k3s.yaml
      dest: "~{{ current_user_name.stdout }}/.kube/config"
      remote_src: true
      owner: "{{ current_user_name.stdout }}"
      group: "{{ current_user_name.stdout }}"
      mode: "0600"
