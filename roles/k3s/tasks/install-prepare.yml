---
- name: Install crun
  ansible.builtin.apt:
    pkg:
    - crun
    - dbus
    update_cache: true
    cache_valid_time: 3600
    state: present
  when:
  - ansible_facts['os_family'] == "Debian"
  - k3s_containerd_use_crun

- name: Enable and start dbus
  when:
  - k3s_containerd_use_crun
  ansible.builtin.systemd_service:
    name: dbus
    state: started
    enabled: "true"

- name: Ensure debian packages are installed
  ansible.builtin.apt:
    pkg: "{{ prepare_debian_install_pkg }}"
    update_cache: true
    cache_valid_time: 3600
    state: present
  when: ansible_facts['os_family'] == "Debian"

- name: Add overlay module
  community.general.modprobe:
    name: overlay
    state: present
    persistent: present
  when:
  - ansible_connection not in [ "container", "docker", "community.docker.docker" ]

- name: Add br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present
    persistent: present
  when:
  - ansible_connection not in [ "container", "docker", "community.docker.docker" ]

- name: Disable swap for current session
  when:
  - not k3s_allow_swap | default(false)
  ansible.builtin.command: swapoff -a
  register: swapoff_output
  changed_when: swapoff_output.rc != 0

- name: Disable swap permanently, persist reboots
  when:
  - not k3s_allow_swap | default(false)
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: true

- name: Set vm.swappiness to 0
  when:
  - not k3s_allow_swap | default(false)
    or
    not k3s_kubelet_config.failSwapon | default(true)
  ansible.posix.sysctl:
    name: vm.swappiness
    value: 0
    sysctl_file: "{{ sysctl_file }}"
    state: present

- name: Set kernel.pid_max
  ansible.posix.sysctl:
    name: kernel.pid_max
    value: "{{ 4194304 if ansible_facts.userspace_bits == '64' else 32768 }}"
    sysctl_file: "{{ sysctl_file }}"
    state: present

- name: Set sysctls
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: "{{ sysctl_file }}"
    state: present
    reload: "{{ ansible_loop.last }}"
  with_items: "{{ prepare_sysctls }}"
  loop_control:
    extended: true
