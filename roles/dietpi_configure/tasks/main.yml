---
- name: Change root password
  when:
  - dietpi_configure_root_password | default("") != ""
  ansible.builtin.user:
    name: "root"
    password: "{{ dietpi_configure_root_password | password_hash('sha512', dietpi_configure_root_password_salt | default('')) }}"

- name: Ensure dbus and libpam-systemd is installed
  become: true
  ansible.builtin.apt:
    pkg:
    - dbus
    - libpam-systemd
    update_cache: true
    cache_valid_time: 3600
    state: present

- name: Install additional packages
  become: true
  ansible.builtin.apt:
    pkg: "{{ dietpi_configure_packages }}"
    update_cache: true
    cache_valid_time: 3600
    state: present
  when:
  - dietpi_configure_packages is defined
  - dietpi_configure_packages is iterable
  - dietpi_configure_packages is not string

- name: Ensure systemd-logind is unmasked
  become: true
  ansible.builtin.systemd_service:
    name: systemd-logind
    state: started
    daemon_reload: false
    masked: false
    enabled: true

- name: Start dbus
  become: true
  ansible.builtin.systemd_service:
    name: dbus
    state: started
    daemon_reload: true
    enabled: true

- name: Read /etc/hostname # noqa: var-naming[no-role-prefix]
  when: ansible_hostname is undefined
  ansible.builtin.slurp:
    src: /etc/hostname
  register: hostname_file

- name: Set current hostname fact # noqa: var-naming[no-role-prefix]
  ansible.builtin.set_fact:
    current_hostname: "{{ ansible_hostname | default(hostname_file.content | default('') | b64decode | trim) }}"

- name: "Disable root password ssh login"
  become: true
  ansible.builtin.lineinfile:
    line: "PermitRootLogin prohibit-password"
    dest: "{{ dietpi_configure_sshd_config }}"
    regexp: '^([#]+)?(\s+)?PermitRootLogin \S+'
    state: "present"
  notify:
  - Restart sshd

- name: Change hostname with dbus
  ansible.builtin.include_tasks: dbus-hostname.yml
  when:
  - dietpi_configure_use_dbus

- name: "Set hostname to {{ inventory_hostname }}"
  become: true
  when:
  - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
  - not dietpi_configure_use_dbus
  ansible.builtin.copy:
    dest: "/etc/hostname"
    owner: root
    group: root
    mode: "0644"
    content: "{{ inventory_hostname }}"
  notify:
  - Emit reboot required
  - Reboot

- name: Replace old hostname with new hostname
  become: true
  when:
  - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
  ansible.builtin.replace:
    path: /etc/hosts
    regexp: '(\s+){{ current_hostname }}(\s+.*)?$'
    replace: '\1{{ inventory_hostname }}\2'

- name: Remove dietpi user
  ansible.builtin.user:
    name: dietpi
    state: absent

- name: Remove dietpi group
  ansible.builtin.group:
    name: dietpi
    state: absent

- name: Create users
  ansible.builtin.include_tasks: create-user.yml
  when:
  - dietpi_configure_users is defined
  loop: "{{ dietpi_configure_users }}"

- name: Check if ZRAM is configured # noqa: var-naming[no-role-prefix]
  ansible.builtin.stat:
    path: "{{ dietpi_configure_zram_swap_udev_rules }}"
  register: zram_udev_file

- name: Configure ZRAM swap # noqa: var-naming[no-role-prefix]
  become: true
  when:
  - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
  - dietpi_configure_zram_swap | default(false)
  - not zram_udev_file.stat.exists
  - dietpi_configure_zram_swap_size_mb | int > 0
  ansible.builtin.command: "/boot/dietpi/func/dietpi-set_swapfile {{ dietpi_configure_zram_swap_size_mb | default(1) | int }} zram"
  register: dietpi_zram_swap_command
  changed_when: dietpi_zram_swap_command.rc != 0

- name: Modify ZRAM swap priority
  when:
  - dietpi_configure_zram_swap | default(false)
  ansible.builtin.lineinfile:
    path: "{{ dietpi_configure_zram_swap_udev_rules }}"
    regexp: '^(.*)swapon\s+\/dev\/zram0(.*)$'
    line: '\1swapon --priority 32767 /dev/zram0\2'
    backrefs: true
  notify:
  - Reload udev
  - Emit reboot required

- name: Set ZRAM sysctls
  when:
  - dietpi_configure_zram_swap | default(false)
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: "{{ dietpi_configure_zram_sysctl_file }}"
    state: present
    reload: "{{ ansible_loop.last }}"
  with_items: "{{ dietpi_configure_zram_sysctls }}"
  loop_control:
    extended: true

- name: Run dietpi-update # noqa: var-naming[no-role-prefix]
  become: true
  when:
  - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
  ansible.builtin.command: "/boot/dietpi/dietpi-update 1"
  register: dietpi_update_command
  changed_when: dietpi_update_command.rc != 0

- name: Configure swapfile
  ansible.builtin.include_tasks: configure-swapfile.yml
  when:
  - dietpi_configure_swap | default(false)
  - dietpi_configure_swapfile | default("") != ""
