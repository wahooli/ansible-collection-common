---
# tasks file for calico
- name: Combine calico_ip_pools into calico_helm_values
  when:
  - calico_ip_pools is defined
  - calico_helm_values is defined
  - calico_helm_values.installation is defined
  - calico_helm_values.installation.calicoNetwork is defined
  ansible.builtin.set_fact:
    calico_helm_values: "{{ calico_helm_values | combine({'installation': {'calicoNetwork': {'ipPools': calico_ip_pools}}}, recursive=true) }}"

- name: "Install debian packages"
  become: true
  ansible.builtin.apt:
    pkg:
    - git
    - curl
    - python3-pip
    - virtualenv
    update_cache: true
    cache_valid_time: 3600
  when: ansible_facts['os_family'] == "Debian"

- name: Install git on Archlinux
  become: true
  community.general.pacman:
    name: git
    state: present
    update_cache: true
  when:
  - ansible_facts['os_family'] == "Archlinux"
  tags:
  - molecule-idempotence-notest

- name: Set calico version
  when: calico_version | default("latest") == "latest"
  block:
  - name: Get list of calico github releases
    run_once: true
    ansible.builtin.uri:
      url: https://api.github.com/repos/projectcalico/calico/releases/latest
      return_content: true
    register: calico_releases_json
  - name: Set calico latest as fact
    ansible.builtin.set_fact:
      calico_version: "{{ calico_releases_json.json.tag_name | trim }}"
    when: not calico_releases_json.failed

- name: Check if can access cluster with kubectl
  become: true
  ansible.builtin.command: "kubectl get nodes"
  register: kubectl_command
  failed_when: false
  changed_when: false

- name: Determine calico_kubeconfig fact if not set
  when:
  - calico_kubeconfig | default("") == ""
  ansible.builtin.import_tasks: resolve-kubeconfig.yml

- name: Get current user name
  ansible.builtin.command: whoami
  register: current_user_name
  changed_when: current_user_name.rc != 0
  when: ansible_user is undefined or ansible_user == ""

- name: Install calico in python venv
  when: kubectl_command.rc == 0
  vars:
    venv_user: "{{ ansible_user | default(current_user_name.stdout) | default(omit) }}"
    virtualenv_command: "{{ 'python -m venv' if ansible_facts['os_family'] == 'Archlinux' else 'virtualenv' }}"
  block:
  - name: Get user home path
    ansible.builtin.shell:
      executable: /bin/bash
      cmd: |-
        set -o pipefail
        grep -E {{ venv_user | default('root') }}: /etc/passwd | awk -F: '{ print $6 }'
    failed_when: user_home_path.rc != 0
    changed_when: false
    register: user_home_path

  - name: Ensure the virtual environment exists
    ansible.builtin.pip:
      name: packaging
      virtualenv: "{{ user_home_path.stdout }}/.ansible-venv"
      virtualenv_command: "{{ virtualenv_command }}"

  - name: Run commands in venv
    vars:
      ansible_python_interpreter: "{{ venv_python }}"
      venv_dir: "{{ user_home_path.stdout }}/.ansible-venv"
      venv_python: "{{ venv_dir }}/bin/python"
    block:
    - name: Install python pre-requisites
      ansible.builtin.pip:
        name: kubernetes
    - name: Install calico with helm
      environment:
        K8S_AUTH_KUBECONFIG: "{{ calico_kubeconfig }}"
      block:
      - name: Install calico with helm
        ansible.builtin.include_tasks: helm-install.yml

  # end block Run commands in venv
# end block Install calico in python venv

- name: Install calicoctl
  ansible.builtin.import_tasks: kubectl-calicoctl-plugin.yml
  become: true
  when:
  - calico_ctl_install | default(false)

- name: Use k3s_bin_dir as calico_k3s_killalld_dir value if defined
  when: k3s_bin_dir is defined
  ansible.builtin.set_fact:
    calico_k3s_killalld_dir: "{{ k3s_bin_dir }}/k3s-killall.sh.d/"

- name: Copy remove calico cleanup script to k3s-killall.sh.d
  become: true
  when:
  - calico_k3s_killall_script | default(false)
  - calico_k3s_killalld_dir | default("") | length > 1
  ansible.builtin.template:
    src: "99-remove-calico-interfaces.sh.j2"
    dest: "{{ calico_k3s_killalld_dir }}/99-remove-calico-interfaces.sh"
    owner: root
    group: root
    mode: "0700"
